<?php

namespace Synful\RequestHandlers;

use Synful\Util\Framework\Request;
use Synful\Util\Framework\RequestHandler;

/**
 * New Request Handler Class.
 */
class RequestHandlerName extends RequestHandler
{
    /**
     * Override the handler endpoint
     * Example: http://myapi.net/user/search
     * uses the endpoint `user/search`.
     *
     * You can also add fields to the endpoint
     * by encapsulating them with `{field_name}`.
     *
     * You can access these fields using
     * `$request->field('field_name')`.
     *
     * @var string
     */
    public $endpoint = 'EndPoint';

    /**
     * Implement MiddleWare.
     *
     * @var array
     */
    // public $middleware = [
    //    \Synful\Util\MiddleWare\APIKeyValidation::class,
    // ];

    /**
     * Set the security level for the RequestHandler.
     * Only API keys with this security level or
     * higher can access this RequestHandler.
     *
     * Note: Must implement the APIKeyValidation middleware.
     *
     * @var int
     */
    // public $security_level = 0;

    /**
     * Assign an array of API Keys to the 'white_list_keys' property to make
     * this handler only allow connections using those API Keys.
     *
     * Note: Must implement the APIKeyValidation middleware.
     *
     * @var array
     */
    // public $white_list_keys = [
    //     'john@acme.com',
    // ];

    /**
     * Override the serializer used for
     * this request handler. This will 
     * override whatever setting is in 
     * the System.php configuration.
     * 
     * @var string
     */
    // public $serializer = \Synful\Util\Serializers\JSONSerializer::class;

    /**
     * Handles a POST request type.
     *
     * @param  \Synful\Util\Framework\Request $request
     * @return \Synful\Util\Framework\Response|array
     */
    public function post(Request $request)
    {
        // Insert your code here
        return sf_response(
            200,
            [
                'message' => 'Your new Request Handler is working!',
            ]
        );
    }

    /**
     * Handles a GET request type.
     *
     * @param  \Synful\Util\Framework\Request $request
     * @return \Synful\Util\Framework\Response|array
     */
    public function get(Request $request)
    {
        // Insert your code here
        return sf_response(
            200,
            [
                'message' => 'Your new Request Handler is working!',
            ]
        );
    }

    /**
     * Handles a PUT request type.
     *
     * @param  \Synful\Util\Framework\Request $request
     * @return \Synful\Util\Framework\Response|array
     */
    public function put(Request $request)
    {
        // Insert your code here
        return sf_response(
            200,
            [
                'message' => 'Your new Request Handler is working!',
            ]
        );
    }

    /**
     * Handles a DELETE request type.
     *
     * @param  \Synful\Util\Framework\Request $request
     * @return \Synful\Util\Framework\Response|array
     */
    public function delete(Request $request)
    {
        // Insert your code here
        return sf_response(
            200,
            [
                'message' => 'Your new Request Handler is working!',
            ]
        );
    }
}
